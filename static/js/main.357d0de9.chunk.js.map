{"version":3,"sources":["api.js","Popup.js","Comics.js","InputWrapper.js","App.js","serviceWorker.js","index.js","GravityAnimating.svg"],"names":["url","URL","params","ts","apikey","hash","limit","format","formatType","noVariants","hasDigitalIssue","orderBy","titleStartsWith","Object","keys","forEach","key","searchParams","append","ignores","checkingThumbnail","item","thumbnail","path","thumb","indexOf","setComicsSearchParams","_ref","set","delete","getComicsList","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","response","results","comicsWithThumbnail","wrap","_context","prev","next","fetch","sent","json","data","filter","console","log","abrupt","stop","apply","this","arguments","Popup","closePopup","comics","title","image","react_default","createElement","className","description","onClick","Comics","InputWrapper","handleSubmit","onSubmit","ev","preventDefault","elements","target","value","toConsumableArray","reduce","acc","el","name","objectSpread","defineProperty","placeholder","Title","Image","extension","alt","src","concat","App","state","list","isLoading","showPopup","setComicsLParams","_this","setState","e","targetComics","find","togglePopup","length","undefined","_this$state","src_InputWrapper","loader","map","src_Comics","id","App_Title","App_Image","assign","src_Popup","text","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.357d0de9.chunk.js","sourcesContent":["let url = new URL(`https://gateway.marvel.com/v1/public/comics`),\n  params = {\n    ts: '1',\n    apikey: '1136faa63131cec339ae63058b627b70',\n    hash: '7abf5f031a9f3f0031ac8c51fcfe8da0',\n    limit: '50',\n    format: 'comic',\n    formatType: 'comic',\n    noVariants: true,\n    hasDigitalIssue: false,\n    orderBy: 'modified',\n    titleStartsWith: 'l',\n  };\nObject.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n\nconst ignores = ['http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708'];\nconst checkingThumbnail = item => {\n  if (!item.thumbnail || !item.thumbnail.path) {\n    return false;\n  }\n  var thumb = item.thumbnail;\n  return (\n    thumb.path.indexOf('image_not_available') === -1 &&\n    ignores.indexOf(thumb.path) === -1\n  );\n};\nexport const setComicsSearchParams = ({ orderBy, titleStartsWith }) => {\n  url.searchParams.set('orderBy', orderBy);\n  url.searchParams.delete('titleStartsWith');\n  titleStartsWith &&\n    url.searchParams.append('titleStartsWith', titleStartsWith);\n};\nexport const getComicsList = async () => {\n  const response = await fetch(url);\n  const results = await response.json();\n  const comicsWithThumbnail = results.data.results.filter(checkingThumbnail);\n  console.log(comicsWithThumbnail);\n  return comicsWithThumbnail;\n};\n","import React from 'react';\n\nconst Popup = ({ closePopup, comics, title, image }) => (\n  <div className=\"popup\">\n    <div className=\"popup_inner\">\n      <div className=\"popup_inner-left\">{image}</div>\n      <div className=\"popup_inner-right\">\n        {title}\n        <p>{comics.description}</p>\n      </div>\n      <button onClick={closePopup}>close me</button>\n    </div>\n  </div>\n);\n\nexport default Popup;\n","import React from 'react';\n\nconst Comics = ({ title, image }) => (\n  <div className=\"comics-wrapper\">\n    {/* <div className=\"title\">{title}</div> */}\n    <div className=\"image\">{image}</div>\n  </div>\n);\n\nexport default Comics;\n","import React from 'react';\n\nconst InputWrapper = ({ handleSubmit }) => {\n  const onSubmit = ev => {\n    ev.preventDefault();\n    const { elements } = ev.target;\n    const value = [...elements].reduce((acc, el) => {\n      if (el.name) {\n        return { ...acc, [el.name]: el.value };\n      }\n      return acc;\n    }, {});\n    handleSubmit(value);\n  };\n  return (\n    <form onSubmit={onSubmit}>\n      <select className=\"search__item\" name=\"orderBy\">\n        <option value=\"modified\">Order by: modified</option>\n        <option value=\"-modified\">Order by: -modified</option>\n        <option value=\"title\">Order by: title</option>\n        <option value=\"-title\">Order by: -title</option>\n      </select>\n      <input\n        className=\"search__item search__input\"\n        placeholder=\"title starts with .....\"\n        name=\"titleStartsWith\"\n      />\n      <button className=\"search__item search__button\">search</button>\n    </form>\n  );\n};\nexport default InputWrapper;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport loader from './GravityAnimating.svg';\n\nimport { getComicsList, setComicsSearchParams } from './api';\n\nimport Popup from './Popup';\nimport Comics from './Comics';\nimport InputWrapper from './InputWrapper';\n\nconst Title = ({ title }) => <h2>{title}</h2>;\nconst Image = ({ path, extension, alt }) => (\n  <img src={`${path}.${extension}`} alt={alt} />\n);\nclass App extends Component {\n  state = {\n    list: [],\n    isLoading: true,\n    searchParams: { orderBy: 'modified' },\n    showPopup: false,\n  };\n\n  async componentDidMount() {\n    const list = await getComicsList();\n    this.setState({ list, isLoading: false });\n  }\n  setComicsLParams = async searchParams => {\n    this.setState({ searchParams, isLoading: true });\n    setComicsSearchParams(searchParams);\n    const list = await getComicsList();\n    await this.setState({ list, isLoading: false });\n  };\n  onClick = e => {\n    const title = e.target.alt;\n    const targetComics = this.state.list.find(comics => comics.title === title);\n    this.togglePopup(targetComics);\n  };\n  togglePopup = (targetComics = {}) => {\n    this.setState({\n      showPopup: !this.state.showPopup,\n      targetComics,\n    });\n  };\n  render() {\n    const { list, isLoading, targetComics, showPopup } = this.state;\n    return (\n      <div className=\"App\">\n        <nav>\n          <InputWrapper handleSubmit={this.setComicsLParams} />\n        </nav>\n        {isLoading ? (\n          <img src={loader} className=\"App-logo\" alt=\"logo\" />\n        ) : (\n          <main onClick={this.onClick}>\n            {list.map(comics => (\n              <Comics\n                key={comics.id}\n                title={<Title title={comics.title} />}\n                image={<Image {...comics.thumbnail} alt={comics.title} />}\n              />\n            ))}\n          </main>\n        )}\n        {showPopup ? (\n          <Popup\n            text=\"Close Me\"\n            closePopup={this.togglePopup}\n            comics={targetComics}\n            title={<Title title={targetComics.title} />}\n            image={\n              <Image {...targetComics.thumbnail} alt={targetComics.title} />\n            }\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/GravityAnimating.34068f26.svg\";"],"sourceRoot":""}